import React, { createContext, useContext, useState } from 'react';
import { v4 as uuidv4 } from 'uuid';

// Sample AI generated paths for demo purposes
const demoStrategicPaths = [
  {
    id: '1',
    title: 'Optimize Onboarding Journey',
    summary: 'Streamline user onboarding to reduce friction and increase early activation.',
    pros: [
      'Likely to significantly reduce early churn, directly addressing the 60% drop-off seen in your CSV data.',
      'Builds immediate user confidence, which will support the product vision in your pitch deck.',
      'Can be implemented incrementally, allowing for continuous testing and refinement.'
    ],
    cons: [
      'Requires precise analytics tracking on the specific screens you have shared.',
      'May not impact long-term engagement issues beyond the first week, as indicated by your 30-day retention numbers.'
    ],
    considerations: [
      'What are our current drop-off points, specifically on the screens you provided?',
      'Do we have clear success metrics for onboarding, given the data we have reviewed?'
    ],
    nextSteps: [
      'Audit current onboarding flow to identify friction points using the screenshots provided.',
      'Implement A/B testing for proposed simplified flow.',
      'Set up enhanced analytics to track progress against the drop-off metrics in your CSV.'
    ]
  },
  {
    id: '2',
    title: 'Deepen Engagement Through Gamification',
    summary: 'Incorporate game mechanics to increase user motivation and repeat usage.',
    pros: [
      'Leverages your existing social features seen in the app screenshots.',
      'Creates habit-forming loops that can improve your retention metrics.',
      'Appeals to your younger demographic segment identified in your user data.',
      'Can drive viral growth through social sharing and competition.'
    ],
    cons: [
      'May feel gimmicky if not aligned with core value proposition.',
      'Could potentially distract from the primary sustainability goals mentioned in your pitch deck.'
    ],
    considerations: [
      'How will gamification align with your brand\'s serious mission in climate tech?',
      'What intrinsic and extrinsic rewards would motivate your specific user segments?'
    ],
    nextSteps: [
      'Map potential gamification elements to user motivations from your research.',
      'Design a simple points/rewards system that aligns with your core sustainability metrics.',
      'Prototype key gamified interactions for the main user journey shown in your screenshots.'
    ]
  },
  {
    id: '3',
    title: 'Personalize User Experience',
    summary: 'Tailor content and features based on user behavior and preferences.',
    pros: [
      'Directly addresses diverse user needs shown in your segmentation data.',
      'Can increase relevance and perceived value for different user types.',
      'Supports progressive disclosure of complex features, potentially solving the complexity issues noted in your feedback document.',
      'Enables more targeted messaging and feature highlighting.'
    ],
    cons: [
      'Requires robust user profiling and preference tracking.',
      'More complex to implement and maintain across the various screens in your app.',
      'May create inconsistent experiences for users switching between devices.'
    ],
    considerations: [
      'Do we have enough user data to make meaningful personalization decisions?',
      'How will we measure the success of personalization efforts against our baseline metrics?'
    ],
    nextSteps: [
      'Define key user archetypes based on your existing user research.',
      'Identify 2-3 high-impact areas where personalization would most benefit users.',
      'Create adaptive UI components that respond to user preferences and behavior patterns.'
    ]
  }
];

const AppContext = createContext();

export function useAppContext() {
  return useContext(AppContext);
}

export function AppProvider({ children }) {
  // User goal state
  const [businessGoal, setBusinessGoal] = useState('');
  
  // Context uploads state
  const [uploads, setUploads] = useState([]);
  
  // Strategic paths state (would be generated by AI in production)
  const [strategicPaths, setStrategicPaths] = useState([]);
  
  // Selected path for detailed view
  const [selectedPath, setSelectedPath] = useState(null);
  
  // Final selected path for summary
  const [finalSelectedPath, setFinalSelectedPath] = useState(null);

  // For demo purposes, generate strategic paths based on uploads and goal
  const generateStrategicPaths = () => {
    // In a real implementation, this would call an AI service
    // For now, we'll use our demo paths
    setStrategicPaths(demoStrategicPaths);
    return demoStrategicPaths;
  };

  // Add a file upload
  const addUpload = (file) => {
    const newUpload = {
      id: uuidv4(),
      file,
      name: file.name,
      type: file.type,
      size: file.size,
      preview: file.type.startsWith('image/') ? URL.createObjectURL(file) : null,
      uploadedAt: new Date()
    };
    
    setUploads(prev => [...prev, newUpload]);
    return newUpload;
  };

  // Remove a file upload
  const removeUpload = (id) => {
    setUploads(prev => {
      const updatedUploads = prev.filter(upload => upload.id !== id);
      // Revoke object URL to avoid memory leaks
      const uploadToRemove = prev.find(upload => upload.id === id);
      if (uploadToRemove && uploadToRemove.preview) {
        URL.revokeObjectURL(uploadToRemove.preview);
      }
      return updatedUploads;
    });
  };

  // Select a path for detailed view
  const selectPathForDetail = (pathId) => {
    const path = strategicPaths.find(p => p.id === pathId);
    setSelectedPath(path);
    return path;
  };

  // Select final path for summary
  const selectFinalPath = (pathId) => {
    const path = strategicPaths.find(p => p.id === pathId);
    setFinalSelectedPath(path);
    return path;
  };

  // Reset all state (for starting over)
  const resetAll = () => {
    setBusinessGoal('');
    
    // Clean up any object URLs to prevent memory leaks
    uploads.forEach(upload => {
      if (upload.preview) {
        URL.revokeObjectURL(upload.preview);
      }
    });
    setUploads([]);
    
    setStrategicPaths([]);
    setSelectedPath(null);
    setFinalSelectedPath(null);
  };

  const value = {
    businessGoal,
    setBusinessGoal,
    uploads,
    addUpload,
    removeUpload,
    strategicPaths,
    generateStrategicPaths,
    selectedPath,
    selectPathForDetail,
    finalSelectedPath,
    selectFinalPath,
    resetAll
  };

  return (
    <AppContext.Provider value={value}>
      {children}
    </AppContext.Provider>
  );
}